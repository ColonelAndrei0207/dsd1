/* write_back stage file
 *
 * Simple description, decides which data should be outputed to the REGS file (either from previous stage or from data_in_i
 * No need for registers, fully combinational module
 *
 */
module stage_wrtie_back(

		//input from memory
		input logic [`D_BITS-1:0] data_in_i,

		//input from EXECTUE
		input logic [`D_BITS-1:0] execute_result_i,
		input logic [2:0] execute_dest_i,
		input logic [`FLAGS_NR-1 :0] flags_i,
		

		//outputs to REGS
		output logic write_reg_o,
		output logic [2:0] dest_o,
		output logic [`D_BITS-1:0] result_o

	);
	
	//assigning the outputs that do not require complex logic
	assign write_reg_o = ( (flags_i == `WRITE) || (flags_i == `READ)  ) ? 1 : 0;
	assign dest_o = ( (flags_i == `WRITE) || (flags_i == `READ)  ) ? execute_dest_i : 0;
	
	//a multiplexer that will direct the result_o either from the memory or the EXECUTE stage
	always_comb begin
		
		result_o = 0;

		if( flags_i == `WRITE ) begin

			result_o = execute_result_i;

		end
		else if ( flags_i == `READ ) begin

			result_o = data_in_i;

		end
		else begin
			
			result_o = 0;
			
		end
	end	
	
endmodule



