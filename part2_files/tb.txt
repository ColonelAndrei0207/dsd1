`timescale 1ns/10ps

/*
 * Describes how the test will turn out
 * In essence we generate the clock, perform a reset, and wait for the program memory to run out of instructions
 * 
 * TODO: add clever solutions to reduce the simulation time (if's to stop faster if a 'HALT' is detected)
 */

module processor_tb();

	logic   rst;
	logic   clk;
	logic [`A_BITS-1:0]  pc;
	logic  [15:0] instruction;
	logic   read;
	logic   write;
	logic  [`A_BITS-1:0] address;
	logic   [`D_BITS-1:0] data_in;
	logic  [`D_BITS-1:0] data_out;
    
    logic tx;
    logic rx;
    logic interrupt;

    fpga DUT (

    .sys_clk_i(clk),
	.sys_reset_n_i(rst),
	
	//connections with the PC
	.rx_i(rx),
	.tx_o(tx),
	.interrupt_o(interrupt)
    
    );


	initial begin

		clk = 0;

		forever begin
			#5 clk = ~clk;
		end
	end


	initial begin
		rst = 1;
		#10;
		rst = 0;
		#10;
		rst = 1;
		data_in = 95;

/*
		while(instruction) begin
			if( instruction[15:11] == `LOAD_I ) begin

				
				#5;
			end

			if (instruction[15:9] == `HALT) begin
				#50; 
				$finish;
			end
			#5;
		end
*/
		/*
		 #10;

		 instruction = {`LOADC, `R0, 8'd15};

		 #40;

		 instruction = {`LOADC, `R1, 8'd34};

		 #40;

		 instruction = {`ADD, `R0, `R0, `R1 };

		 #40;

		 instruction = {`STORE, `R1, `R0 };


		 */

		#450;

		$finish;

	end


endmodule

