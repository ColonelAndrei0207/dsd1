`timescale 1ns/10ps

/*
 * Describes how the test will turn out
 * In essence we generate the clock, perform a reset, and wait for the program memory to run out of instructions
 * 
 * TODO: add clever solutions to reduce the simulation time (if's to stop faster if a 'HALT' is detected)
 */

module processor_tb();

localparam baud_rate = 10000; //baud rate will be set based on the configured AXILite IP baud rate

localparam parity_bit = 0; //set as 0 if no parity bit is configured

//TODO: extra parameters for the read/write byte tasks

    logic clk;
    logic rst;
    logic tx;
    logic rx;
    logic interrupt;

    fpga DUT (

    .sys_clk_i(clk),
	.sys_reset_n_i(rst),
	
	//connections with the PC
	.rx_i(rx),
	.tx_o(tx),
	.interrupt_o(interrupt)
    
    );

	initial begin

		clk = 0;

		forever begin
			#5 clk = ~clk;
		end
	end


	initial begin
		rst = 1;
		#10;
		rst = 0;
		#10;
		rst = 1;
		
//start of task call

		#450;

		$finish;

	end


endmodule

/* write_byte task
task description:
it will get as input the data byte, and transform the byte into a UART friendly tx signal;
TODO: revise UART protocol to ensure proper sending of data
*/
task write_byte(input [7:0] data_byte, output rx, input int baud_rate);
    int i;
    begin
        // Start bit (logic 0)
        rx = 1'b0;
        #(baud_rate);

        // Data bits (LSB first)
        for (i = 0; i < 8; i = i + 1) begin
            rx = data_byte[i];
            #(baud_rate);
        end

        // Stop bit (logic 1)
        rx = 1'b1;
        #(baud_rate);
    end
endtask

/* read_byte task
task description: 
it will make sure that the data received on rx
*/

task read_byte(output [7:0] data_byte, input tx, input int baud_rate);
    integer i;
    begin
        // Wait for start bit (logic 0)
        @(negedge tx); // Trigger on falling edge = start bit
        #(baud_rate / 2); // Wait half a bit period to sample in the middle of the start bit
        if (tx !== 1'b0) begin
            $display("ERROR: Start bit not valid");
            data_byte = 8'hXX;
            return;
        end

        // Sample data bits (LSB first)
        for (i = 0; i < 8; i = i + 1) begin
            #(baud_rate);
            data_byte[i] = tx;
        end

        // Wait and sample stop bit
        #(baud_rate);
        if (tx !== 1'b1) begin
            $display("ERROR: Stop bit not valid");
        end
    end
endtask



task write_packet(
    input  [7:0] command,
    input  [15:0] addr,
    input  [7:0] cnt,
    input  [31:0] data[] // dynamic array of 32-bit words
);
    integer i;
    begin
        // Send command
        write_byte(command);

        // Send 2-byte address (MSB first)
        write_byte(addr[15:8]); // high byte
        write_byte(addr[7:0]);  // low byte

        // Send count
        write_byte(cnt);

        // Send cnt number of 4-byte data words (MSB first)
        for (i = 0; i < cnt; i = i + 1) begin
            write_byte(data[i][31:24]); // byte 3 (MSB)
            write_byte(data[i][23:16]); // byte 2
            write_byte(data[i][15:8]);  // byte 1
            write_byte(data[i][7:0]);   // byte 0 (LSB)
        end
    end
endtask


task read_packet(
    input  int cnt,
    output logic [31:0] data[] // dynamic array to store received 4-byte words
);
    integer i;
    logic [7:0] byte0, byte1, byte2, byte3;
    begin
        data = new[cnt]; // resize output array to cnt elements

        for (i = 0; i < cnt; i = i + 1) begin
            // Read 4 bytes (MSB first)
            read_byte(byte3); // MSB
            read_byte(byte2);
            read_byte(byte1);
            read_byte(byte0); // LSB

            data[i] = {byte3, byte2, byte1, byte0};
        end
    end
endtask
