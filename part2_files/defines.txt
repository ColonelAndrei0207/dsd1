 /******************************************************************************
  *
  * FILE DESCRIPTION: Define file with macros included in the design of the RISC processor
  *
  *******************************************************************************/



//1. MAIN PARAMETERS

 `define A_BITS 10 //data bus size
 `define D_BITS 32 //address bus size
 `define A_SIZE 16
 `define FLAGS_NR 3
 `define CST_NR_BITS 8
 `define SIGN_BITS 1
 
 `define UART_PAYLOAD 8
 `define AXI_REQ_NR 4
 `define MEM_REQ_NR 2
 
   //mem_ctrl defines that i will use 
 
  //risc_flags
  `define RISC_FLAG_NR 2
  `define START_FLAG `RISC_FLAG_NR-1'b01
  `define RESET_FLAG `RISC_FLAG_NR-1'b10
  `define HALT_FLAG `RISC_FLAG_NR-1'b11
  
  //i_o_axi commands
  `define AXI_RX_CHECK `AXI_REQ_NR-1'd1

  `define AXI_RX_READ `AXI_REQ_NR-1'd2 //getting the command
  `define AXI_RX_ADDR `AXI_REQ_NR-1'd5 //getting the address
  `define AXI_RX_CNT  `AXI_REQ_NR-1'd8 //getting the length
  `define AXI_RX_INST `AXI_REQ_NR-1'd6 //getting instructions
  `define AXI_RX_DATA `AXI_REQ_NR-1'd7 //getting data

  `define AXI_TX_WRITE `AXI_REQ_NR-1'd4

  `define AXI_TX_CHECK `AXI_REQ_NR-1'd3
  
  `define AXI_STATUS_ADDR 8'h08
  `define AXI_RX_FIFO_ADDR 8'h00
  `define AXI_TX_FIFO_ADDR 8'h04
 
 
 //i_o_mem commands
  `define MEM_DATA_READ `MEM_REQ_NR-1'd3
  `define MEM_DATA_WRITE `MEM_REQ_NR-1'd1
  `define MEM_INST_WRITE `MEM_REQ_NR-1'd2  
 
  
//UART commands (the ones that say what we want to do

  `define RESET_RISC `UART_PAYLOAD-1'd1
  `define HALT_RISC `UART_PAYLOAD-1'd2
  `define START_RISC `UART_PAYLOAD-1'd3
  `define DATA_WRITE `UART_PAYLOAD-1'd4
  `define INST_WRITE `UART_PAYLOAD-1'd5
  `define DATA_READ `UART_PAYLOAD-1'd6


 
 `define MEM_SIZE (1<<((`A_SIZE)-2))
 
 `define M_BITS 23
 `define E_BITS 8
 
 
 `define F_E_FLOP	`D_BITS-`SIGN_BITS-1:`D_BITS-`E_BITS-1 
 `define F_M_FLOP	`M_BITS-1:0
 

//2. REGISTER SET

 `define REG_NR 8

 `define R0 3'd0
 `define R1 3'd1
 `define R2 3'd2
 `define R3 3'd3
 `define R4 3'd4
 `define R5 3'd5
 `define R6 3'd6
 `define R7 3'd7

 //3. MEMORY

 `define MEMSIZE 2**`A_BITS


//4. INSTRUCTION SET; 22 in number; 4 in 4 bits; 3 in 5 bits; 13 in 7 bits and HALT and NOP that are blank
//these macros define the opcode associated with each instruction type

//they are used in the processor description

//NOP & HALT
 `define NOP        7'b0000000
 `define HALT       7'b1111111

//7 bits instructions
 `define ADD        7'b0000001
 `define ADDF       7'b0000010

 `define SUB        7'b0000011
 `define SUBF       7'b0000100

 `define AND        7'b0000101
 `define OR         7'b0000110
 `define XOR        7'b0000111

 `define NAND       7'b0001000
 `define NOR        7'b0001001
 `define NXOR       7'b0001010

 `define SHIFTR     7'b0001011
 `define SHIFTRA    7'b0001100
 `define SHIFTL     7'b0001101


//5 bits instruction

//the following instrcutions will also have macros used in the program memory

 `define LOAD       7'b10010xx
 `define LOADC      7'b10001xx
 `define STORE      7'b10100xx

 `define LOAD_I       5'b10010
 `define LOADC_I      5'b10001
 `define STORE_I      5'b10100

//4 bits instructions

 `define JMP        7'b1011xxx
 `define JMPR       7'b1100xxx
 `define JMPC       7'b1101xxx
 `define JMPRC      7'b1110xxx

 `define JMP_I        4'b1011
 `define JMPR_I       4'b1100
 `define JMPC_I       4'b1101
 `define JMPRC_I      4'b1110
 
//5.1. conditional jump conditions

 `define N  3'b000
 `define NN 3'b001
 `define Z  3'b010
 `define NZ 3'b011



 //6. flags declaration used for the processor core:
 `define BLANK 			`FLAGS_NR'b000
 `define WRITE 			`FLAGS_NR'b001
 `define READ   		`FLAGS_NR'b010
 `define JUMP_SIMPLE	`FLAGS_NR'b011
 `define JUMP_ADD		`FLAGS_NR'b100
 `define WRITE_MEM		`FLAGS_NR'b101

 `define STOP   		`FLAGS_NR'b111

 //7. fields used for the operadn placement
 `define F_AL_OP1	5:3
 `define F_AL_OP2	2:0
 `define F_AL_OP0	8:6

 `define F_SH_OP0	8:6
 
 `define F_LS_OP0	10:8
 `define F_LS_OP1	2:0
 `define F_LS_CST	`CST_NR_BITS-1:0
 
 
 `define F_JMP_OP	2:0
 `define F_JMP_OP0	8:6
 `define F_JMP_OP1	2:0
 `define F_JMP_OFF	5:0
 
 `define F_JMP_CND	11:9
 


