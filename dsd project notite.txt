Pt fpga.sv
	De realizat blocul care genereaza semnalele de start,stop,halt pt RISC core;
	De facut mux-ul pt addr instructiune (care s-ar lega de cum implementez semnalele de mai sus);

PT floating point:
	De asigurat faptul ca imi merge bine procesarea (nu am probleme)
	De implementat ideea de NaN

PT interconexiune module:
	~DONE	De rezolvat mux-urile notate; (mai este cel notat in fpga.sv)
	DONE	De asigurat toate conexiunile 


DONE Modificari necesare la loading gen_reg (nu ma pot baza pe ideea de a avea in if semnale generate tot in acel bloc; 
DONE	Eventual sa le mut in always_ff al fsm-ului, pare mai rezonabil acolo, avand deja command_received_s, mai ales ca se leaga, intr-un fel si de starile fsm-ului, eventual de bagat un mini-counter, a.i. sa se stie ca la READ_RX se parcurg elementele cerute

TEORETIC DONE, DE VERIFICAT IN SIMULARE    De vazut daca e corect cum se incarca addr_received, cnt_received + incrementarea;
TEORETIC DONE, DE VERIFICAT IN SIMULARE	   de reverificat tranzitiile fsm a.i. sa ma asigur ca se citeste si se trimite corespunzator data din si catre memorie;
DONE de implementat verificarile pentru check_rx si check_tx (poate in fsm, poate in i_o_axi, de vazut)
daca totul ok, de facut un mic tb dedicat mem_ctrl + memorie
de facut modificari in risc a.i. sa se adapteze floating point + start/stop/halt primite de la mem_ctrl
	(pt start/stop eventual clk gating; pt halt eventual fortare a semnalelor risc a.i. sa apara ca instructiunea ce se va procesa sa fie HALT)



Prioritatea nr 1: de rezolvat mem_ctrl;
GENERAL: pentru comenzi si toate cele sa adaug ori define ori parte din package (ma incurc la comenzi)	
	 DONE: de gasit o conventie pentru request_type_axi; a.i. sa se stie ce anume s-a cerut, ce anume primeste fsm-ul
	 de rezolvat TODO-urile

fsm:
	
	DONE de facut bloc decrypt;
	DONE de facut bloc de incrementare a adresei pentru i_o_mem;
	DONE de implementat flag-uri a.i. sa se stie cand sa se trimita date catre i_o_axi sau i_o_mem
	
i_o_mem:
	momentan nimic (vezi GENERAL)
		

i_o_axi:
	De actualizat cu noile comenzi care se primesc de la FSM; se va intarzia cererea de citire de adresa si instr/data a.i. sa se primeasca 16 biti pt adresa/instr si 32 biti de data

mem_ctrl:
	conectare module intre ele si i_o_mem cu exteriorul
