/*
 * memory controller module file
 * it contains the description of the memory controller used in the DSD project
 *
 * Modlue contains 2 sets of interfaces:
 *  1. AXI4-Lite interface that connects the controller with the UART driver IP taken from the Xilinx library
 *  2. Simple interface linked with the memory file used by the RISC core
 *
 * Memory controller will use a FSM to analyze the information taken from the UART driver and send to the memory the desired inputs
 * Inputs can be:
 *    - reset (resets and then stops the Simple RISC PC)
 - halt  (stops the Simple RISC PC)
 - start (enables the Simple RISC PC)
 - write memory from a start address a given number of memory words. The packet contains the command, the start address, the length, and the data payload.
 - read memory from the start address a given number of memory words. The packet contains the command, the start address, and the length.

 * FSM diagram can be found in the documentation
 *
 *

 */


module mem_ctrl (

		//axi interface with master modport
		axi_lite_interface.master axi_if,

		//interface linking the controller with the data memory
		input logic [`D_BITS-1:0] data_in_i,

		output logic [`D_BITS-1:0] data_out_o,
		output logic [`A_BITS-1:0] addr_out_o,
		output logic data_we,

		//interface linking the controller with the instruction memory
		output logic [`A_BITS-1:0] instr_addr_out_o,
		output logic [`A_SIZE-1:0] instr_out_o,
		output logic instr_we
	);

	//interconnecting wires

	//connecting i_o_axi with the fsm
	logic [`AXI_REQ_NR-1:0] axi_request_type_s;
	logic data_sent_fsm_s;
	logic [ `D_BITS-1 : 0] axi_data_in_s;
	logic [ `D_BITS-1 : 0] axi_data_out_s;

	//connecting i_o_mem with the fsm
	logic data_mem_pulse_s;
	logic [ `D_BITS-1 : 0] data_out_mem_s;
	logic [ `D_BITS-1 : 0] data_in_mem_s;
	logic [ `MEM_REQ_NR-1 : 0] request_type_mem_s;
	logic [ `A_BITS-1 : 0] addr_mem_s;
	
	


	i_o_axi driver_connection_inst(

		.axi_if(axi_if),
		.request_type_i(axi_request_type_s),
		.data_sent_fsm(data_sent_fsm_s),

		.data_in_i(axi_data_in_s),
		.data_out_o(axi_data_out_s)

	);

	fsm_mem_ctrl fsm_inst(

		.sys_clk_i(axi_if.a_clk),
		.sys_reset_n_i(axi_if.a_reset_n),


		.mem_ready_i(data_mem_pulse_s),

		.data_out_mem_o(data_in_mem_s),
		.addr_mem_o(addr_mem_s),
		.data_in_mem_i(data_out_mem_s),
		.request_type_mem_o(request_type_mem_s),


		.data_axi_pulse_i(data_sent_fsm_s), //signal used to state that data has been received from the i_o
        
		.request_axi_type_o(axi_request_type_s),
        
		.data_out_axi_o(axi_data_in_s),
		.data_in_axi_i(axi_data_out_s)

	);

	i_o_mem i_o_mem_inst (
		
		.sys_clk_i(axi_if.a_clk),
		.sys_reset_n_i(axi_if.a_reset_n),

		.data_in_i(data_in_mem_s),
		.addr_in_i(addr_mem_s),
		.command_i(request_type_mem_s),

		.data_ctrl_o(data_out_mem_s),
		.data_sent(data_mem_pulse_s),

		//link with the datary
		.data_mem_in_i(data_in_i),
		.data_out_o(data_out_o),
		.data_addr_out_o(addr_out_o),
		.data_we(data_we),

		// link with the insion memory
		.instr_addr_out_o(instr_addr_out_o),
		.instr_out_o(instr_out_o),
		.instr_we(instr_we)
		
		);


endmodule



