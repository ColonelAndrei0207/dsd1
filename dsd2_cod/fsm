/*

 description of the central unit of the mem controller:
 	It contains a fsm that states how the controller behaves:
 	when to look for data into the driver's status register
 	when to look for data in the driver's Rx FIFO
 	when to request to the memory data, so that it would be sent to the driver's Tx FIFO
 	
 it will contain a counter, used when writing data into the memory
 it will have a frequency divider, so that the current consumption would be lowered (also used to not ask every clock cycle for data in the status register)
 it will ensure that the data received from the driver is properly translated, based on the command-byte given
 
 */


module fsm_mem_ctrl(

		input logic sys_clk_i,
		input logic sys_reset_n_i,

		//signals related to the i_o_mem

		input logic mem_ready,

		output logic [`D_BITS-1:0] data_out_mem_o,
		input logic [`D_BITS-1:0] data_in_mem_i,
		output logic request_type_mem_o,

		//signals related to the i_o_axi
		input logic data_axi_pulse, //signal used to state that data has been received from the i_o

		output logic [1:0] request_axi_type_o,

		output logic [`D_BITS-1:0] data_out_axi_o,
		input logic [`D_BITS-1:0] data_in_axi_i

	);


	logic [`UART_PAYLOAD - 1: 0] cnt_ctrl_s; //counter of the internal mem_ctrl
	logic [`UART_PAYLOAD - 1: 0] cnt_received_s; //value received from the driver, representing the length in the command

	//general register that stores the information received either from the memory or the driver
	logic [ `D_BITS-1 : 0 ] gen_reg;

	//address register that gets the value of the address we want to write into / read from
	logic [`A_BITS-1:0] addr_s;


	//loading data into the gen_reg
	always_ff @ (posedge sys_clk_i, negedge sys_reset_n_i) begin

		if(!sys_reset_n_i) begin

			gen_reg <=0;

		end
		else begin

			if(data_axi_pulse) begin

				gen_reg <= data_in_axi_i;

			end
			else if(mem_ready) begin

				gen_reg <= data_in_mem_i;

			end
			else begin

				gen_reg <= gen_reg;

			end
		end
	end
	
	

endmodule



